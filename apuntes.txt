
GRAMTICA
operarores logicos
asignaciones


agregar a compiler visitor los cambios de la gram치tica

crear clase valueWrapper en la carpeta compiler

en compilervisitor cambiar los tipos int por valueWrapper 






ENTRADAS PROBADAS

-> IGUALDAD Y DESIGUALDAD 
    fmt.Println("int");
    fmt.Println(1 == 1);        
    fmt.Println(1 != 1);        

    fmt.Println("float");
    fmt.Println(13.0 == 13.0);  
    fmt.Println(0.001 != 0.001); 

    fmt.Println("FLOAT")
    fmt.Println(35.0 == 35);    
    fmt.Println(98.0 != 98);     

    fmt.Println("Booleans");
    fmt.Println(true == false);  
    fmt.Println(true != false);   

    fmt.Println("String");
    fmt.Println("ho" == "ha");   
    fmt.Println("ho" != "ho");    

    fmt.Println("rune");
    fmt.Println('a' == 'a');      
    fmt.Println('H' != 'h');  

--------------------------------

-> RELACIONALES

    // int
    fmt.Println(1 <= 1);
    // float
    fmt.Println(1.0 <= 1.0);
    // int y float
    fmt.Println(1 <= 1.0);
    // float e int
    fmt.Println(1.0 <= 1.0);
    // rune
    fmt.Println('a' <= 'a');









 /*//var x []int
 var x = []int {1, 2, 3, 4, 5}
 z := []string {"hola", "adios", "bienvenido"}
 fmt.Println(x)
 fmt.Println(z)
//x[1] = 5
fmt.Println(strings.Join(z , " "))
x = append(x, 15) 
 fmt.Println("Agregando un int con append")
fmt.Println(x[5])
z = append(z, "15") 
 fmt.Println("Agregando un string con append")
fmt.Println(z)
fmt.Println(slices.Index(x, 2))

// Imprimir tama침os de arreglos
fmt.Println("Imprimiento el slice z ------ >>>",len(z))
*/


numeros := []int{1, 2, 3}
fmt.Println(numeros[2]) // Salida: 3
l := numeros[2]
fmt.Println(l)


// Definici칩n e inicializaci칩n directa 
numerotes := []int{1, 2, 3, 4} 
 
// Slice multidimensional inicial 
mtx1 := [][]int{ 
    {1, 2, 3}, 
    {4, 5, 6}, 
    {7, 8, 9}, 
} 
 
// Agregar el slice `numerotes` como una nueva fila 
mtx1 = append(mtx1, numerotes) 
 
fmt.Println(mtx1[3][2]) // 3 

/*
numeros[2] = 100
fmt.Println(numeros) // Salida: [1, 2, 100] */