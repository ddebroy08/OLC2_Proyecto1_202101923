//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace analyzer {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class LanguageLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, Types=52, 
		INT=53, BOOL=54, FLOAT=55, STRING=56, RUNE=57, WS=58, ID=59, COMMENT=60, 
		ML_COMMENT=61;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
		"T__49", "T__50", "Types", "INT", "BOOL", "FLOAT", "STRING", "RUNE", "ESC", 
		"WS", "ID", "COMMENT", "ML_COMMENT"
	};


	public LanguageLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LanguageLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'var'", "'='", "';'", "'['", "']'", "'{'", "','", "'}'", "':='", 
		"'func'", "'('", "')'", "'class'", "'fmt.Println('", "'if'", "'else'", 
		"'while'", "'for'", "'switch'", "'case'", "':'", "'default'", "'break'", 
		"'continue'", "'return'", "'-'", "'!'", "'*'", "'/'", "'%'", "'+'", "'+='", 
		"'-='", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'&&'", "'||'", 
		"'strconv.Atoi('", "'strconv.ParseFloat('", "'reflect.TypeOf('", "'slices.Index('", 
		"'strings.Join('", "', \" \")'", "'append('", "'len('", "'new'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "Types", "INT", "BOOL", "FLOAT", "STRING", "RUNE", 
		"WS", "ID", "COMMENT", "ML_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Language.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static LanguageLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,61,493,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,
		1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,
		9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
		14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
		17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
		19,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,
		22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
		24,1,24,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,
		29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
		35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,
		40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,
		41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
		42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,
		43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,
		44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,
		45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,
		46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,
		48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
		51,1,51,1,51,1,51,1,51,3,51,405,8,51,1,52,4,52,408,8,52,11,52,12,52,409,
		1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,421,8,53,1,54,4,54,424,
		8,54,11,54,12,54,425,1,54,1,54,4,54,430,8,54,11,54,12,54,431,1,55,1,55,
		1,55,5,55,437,8,55,10,55,12,55,440,9,55,1,55,1,55,1,56,1,56,1,56,1,56,
		3,56,448,8,56,1,56,1,56,1,57,1,57,1,57,1,58,4,58,456,8,58,11,58,12,58,
		457,1,58,1,58,1,59,1,59,5,59,464,8,59,10,59,12,59,467,9,59,1,60,1,60,1,
		60,1,60,5,60,473,8,60,10,60,12,60,476,9,60,1,60,1,60,1,61,1,61,1,61,1,
		61,5,61,484,8,61,10,61,12,61,487,9,61,1,61,1,61,1,61,1,61,1,61,1,485,0,
		62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
		26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
		38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,
		50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,0,117,58,119,59,
		121,60,123,61,1,0,8,1,0,48,57,2,0,34,34,92,92,2,0,39,39,92,92,6,0,34,34,
		39,39,92,92,110,110,114,114,116,116,3,0,9,10,13,13,32,32,2,0,65,90,97,
		122,3,0,48,57,65,90,97,122,2,0,10,10,13,13,506,0,1,1,0,0,0,0,3,1,0,0,0,
		0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
		0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
		27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
		0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,
		125,1,0,0,0,3,129,1,0,0,0,5,131,1,0,0,0,7,133,1,0,0,0,9,135,1,0,0,0,11,
		137,1,0,0,0,13,139,1,0,0,0,15,141,1,0,0,0,17,143,1,0,0,0,19,146,1,0,0,
		0,21,151,1,0,0,0,23,153,1,0,0,0,25,155,1,0,0,0,27,161,1,0,0,0,29,174,1,
		0,0,0,31,177,1,0,0,0,33,182,1,0,0,0,35,188,1,0,0,0,37,192,1,0,0,0,39,199,
		1,0,0,0,41,204,1,0,0,0,43,206,1,0,0,0,45,214,1,0,0,0,47,220,1,0,0,0,49,
		229,1,0,0,0,51,236,1,0,0,0,53,238,1,0,0,0,55,240,1,0,0,0,57,242,1,0,0,
		0,59,244,1,0,0,0,61,246,1,0,0,0,63,248,1,0,0,0,65,251,1,0,0,0,67,254,1,
		0,0,0,69,256,1,0,0,0,71,258,1,0,0,0,73,261,1,0,0,0,75,264,1,0,0,0,77,267,
		1,0,0,0,79,270,1,0,0,0,81,273,1,0,0,0,83,276,1,0,0,0,85,290,1,0,0,0,87,
		310,1,0,0,0,89,326,1,0,0,0,91,340,1,0,0,0,93,354,1,0,0,0,95,361,1,0,0,
		0,97,369,1,0,0,0,99,374,1,0,0,0,101,378,1,0,0,0,103,404,1,0,0,0,105,407,
		1,0,0,0,107,420,1,0,0,0,109,423,1,0,0,0,111,433,1,0,0,0,113,443,1,0,0,
		0,115,451,1,0,0,0,117,455,1,0,0,0,119,461,1,0,0,0,121,468,1,0,0,0,123,
		479,1,0,0,0,125,126,5,118,0,0,126,127,5,97,0,0,127,128,5,114,0,0,128,2,
		1,0,0,0,129,130,5,61,0,0,130,4,1,0,0,0,131,132,5,59,0,0,132,6,1,0,0,0,
		133,134,5,91,0,0,134,8,1,0,0,0,135,136,5,93,0,0,136,10,1,0,0,0,137,138,
		5,123,0,0,138,12,1,0,0,0,139,140,5,44,0,0,140,14,1,0,0,0,141,142,5,125,
		0,0,142,16,1,0,0,0,143,144,5,58,0,0,144,145,5,61,0,0,145,18,1,0,0,0,146,
		147,5,102,0,0,147,148,5,117,0,0,148,149,5,110,0,0,149,150,5,99,0,0,150,
		20,1,0,0,0,151,152,5,40,0,0,152,22,1,0,0,0,153,154,5,41,0,0,154,24,1,0,
		0,0,155,156,5,99,0,0,156,157,5,108,0,0,157,158,5,97,0,0,158,159,5,115,
		0,0,159,160,5,115,0,0,160,26,1,0,0,0,161,162,5,102,0,0,162,163,5,109,0,
		0,163,164,5,116,0,0,164,165,5,46,0,0,165,166,5,80,0,0,166,167,5,114,0,
		0,167,168,5,105,0,0,168,169,5,110,0,0,169,170,5,116,0,0,170,171,5,108,
		0,0,171,172,5,110,0,0,172,173,5,40,0,0,173,28,1,0,0,0,174,175,5,105,0,
		0,175,176,5,102,0,0,176,30,1,0,0,0,177,178,5,101,0,0,178,179,5,108,0,0,
		179,180,5,115,0,0,180,181,5,101,0,0,181,32,1,0,0,0,182,183,5,119,0,0,183,
		184,5,104,0,0,184,185,5,105,0,0,185,186,5,108,0,0,186,187,5,101,0,0,187,
		34,1,0,0,0,188,189,5,102,0,0,189,190,5,111,0,0,190,191,5,114,0,0,191,36,
		1,0,0,0,192,193,5,115,0,0,193,194,5,119,0,0,194,195,5,105,0,0,195,196,
		5,116,0,0,196,197,5,99,0,0,197,198,5,104,0,0,198,38,1,0,0,0,199,200,5,
		99,0,0,200,201,5,97,0,0,201,202,5,115,0,0,202,203,5,101,0,0,203,40,1,0,
		0,0,204,205,5,58,0,0,205,42,1,0,0,0,206,207,5,100,0,0,207,208,5,101,0,
		0,208,209,5,102,0,0,209,210,5,97,0,0,210,211,5,117,0,0,211,212,5,108,0,
		0,212,213,5,116,0,0,213,44,1,0,0,0,214,215,5,98,0,0,215,216,5,114,0,0,
		216,217,5,101,0,0,217,218,5,97,0,0,218,219,5,107,0,0,219,46,1,0,0,0,220,
		221,5,99,0,0,221,222,5,111,0,0,222,223,5,110,0,0,223,224,5,116,0,0,224,
		225,5,105,0,0,225,226,5,110,0,0,226,227,5,117,0,0,227,228,5,101,0,0,228,
		48,1,0,0,0,229,230,5,114,0,0,230,231,5,101,0,0,231,232,5,116,0,0,232,233,
		5,117,0,0,233,234,5,114,0,0,234,235,5,110,0,0,235,50,1,0,0,0,236,237,5,
		45,0,0,237,52,1,0,0,0,238,239,5,33,0,0,239,54,1,0,0,0,240,241,5,42,0,0,
		241,56,1,0,0,0,242,243,5,47,0,0,243,58,1,0,0,0,244,245,5,37,0,0,245,60,
		1,0,0,0,246,247,5,43,0,0,247,62,1,0,0,0,248,249,5,43,0,0,249,250,5,61,
		0,0,250,64,1,0,0,0,251,252,5,45,0,0,252,253,5,61,0,0,253,66,1,0,0,0,254,
		255,5,62,0,0,255,68,1,0,0,0,256,257,5,60,0,0,257,70,1,0,0,0,258,259,5,
		62,0,0,259,260,5,61,0,0,260,72,1,0,0,0,261,262,5,60,0,0,262,263,5,61,0,
		0,263,74,1,0,0,0,264,265,5,61,0,0,265,266,5,61,0,0,266,76,1,0,0,0,267,
		268,5,33,0,0,268,269,5,61,0,0,269,78,1,0,0,0,270,271,5,38,0,0,271,272,
		5,38,0,0,272,80,1,0,0,0,273,274,5,124,0,0,274,275,5,124,0,0,275,82,1,0,
		0,0,276,277,5,115,0,0,277,278,5,116,0,0,278,279,5,114,0,0,279,280,5,99,
		0,0,280,281,5,111,0,0,281,282,5,110,0,0,282,283,5,118,0,0,283,284,5,46,
		0,0,284,285,5,65,0,0,285,286,5,116,0,0,286,287,5,111,0,0,287,288,5,105,
		0,0,288,289,5,40,0,0,289,84,1,0,0,0,290,291,5,115,0,0,291,292,5,116,0,
		0,292,293,5,114,0,0,293,294,5,99,0,0,294,295,5,111,0,0,295,296,5,110,0,
		0,296,297,5,118,0,0,297,298,5,46,0,0,298,299,5,80,0,0,299,300,5,97,0,0,
		300,301,5,114,0,0,301,302,5,115,0,0,302,303,5,101,0,0,303,304,5,70,0,0,
		304,305,5,108,0,0,305,306,5,111,0,0,306,307,5,97,0,0,307,308,5,116,0,0,
		308,309,5,40,0,0,309,86,1,0,0,0,310,311,5,114,0,0,311,312,5,101,0,0,312,
		313,5,102,0,0,313,314,5,108,0,0,314,315,5,101,0,0,315,316,5,99,0,0,316,
		317,5,116,0,0,317,318,5,46,0,0,318,319,5,84,0,0,319,320,5,121,0,0,320,
		321,5,112,0,0,321,322,5,101,0,0,322,323,5,79,0,0,323,324,5,102,0,0,324,
		325,5,40,0,0,325,88,1,0,0,0,326,327,5,115,0,0,327,328,5,108,0,0,328,329,
		5,105,0,0,329,330,5,99,0,0,330,331,5,101,0,0,331,332,5,115,0,0,332,333,
		5,46,0,0,333,334,5,73,0,0,334,335,5,110,0,0,335,336,5,100,0,0,336,337,
		5,101,0,0,337,338,5,120,0,0,338,339,5,40,0,0,339,90,1,0,0,0,340,341,5,
		115,0,0,341,342,5,116,0,0,342,343,5,114,0,0,343,344,5,105,0,0,344,345,
		5,110,0,0,345,346,5,103,0,0,346,347,5,115,0,0,347,348,5,46,0,0,348,349,
		5,74,0,0,349,350,5,111,0,0,350,351,5,105,0,0,351,352,5,110,0,0,352,353,
		5,40,0,0,353,92,1,0,0,0,354,355,5,44,0,0,355,356,5,32,0,0,356,357,5,34,
		0,0,357,358,5,32,0,0,358,359,5,34,0,0,359,360,5,41,0,0,360,94,1,0,0,0,
		361,362,5,97,0,0,362,363,5,112,0,0,363,364,5,112,0,0,364,365,5,101,0,0,
		365,366,5,110,0,0,366,367,5,100,0,0,367,368,5,40,0,0,368,96,1,0,0,0,369,
		370,5,108,0,0,370,371,5,101,0,0,371,372,5,110,0,0,372,373,5,40,0,0,373,
		98,1,0,0,0,374,375,5,110,0,0,375,376,5,101,0,0,376,377,5,119,0,0,377,100,
		1,0,0,0,378,379,5,46,0,0,379,102,1,0,0,0,380,381,5,105,0,0,381,382,5,110,
		0,0,382,405,5,116,0,0,383,384,5,102,0,0,384,385,5,108,0,0,385,386,5,111,
		0,0,386,387,5,97,0,0,387,388,5,116,0,0,388,389,5,54,0,0,389,405,5,52,0,
		0,390,391,5,115,0,0,391,392,5,116,0,0,392,393,5,114,0,0,393,394,5,105,
		0,0,394,395,5,110,0,0,395,405,5,103,0,0,396,397,5,98,0,0,397,398,5,111,
		0,0,398,399,5,111,0,0,399,405,5,108,0,0,400,401,5,114,0,0,401,402,5,117,
		0,0,402,403,5,110,0,0,403,405,5,101,0,0,404,380,1,0,0,0,404,383,1,0,0,
		0,404,390,1,0,0,0,404,396,1,0,0,0,404,400,1,0,0,0,405,104,1,0,0,0,406,
		408,7,0,0,0,407,406,1,0,0,0,408,409,1,0,0,0,409,407,1,0,0,0,409,410,1,
		0,0,0,410,106,1,0,0,0,411,412,5,116,0,0,412,413,5,114,0,0,413,414,5,117,
		0,0,414,421,5,101,0,0,415,416,5,102,0,0,416,417,5,97,0,0,417,418,5,108,
		0,0,418,419,5,115,0,0,419,421,5,101,0,0,420,411,1,0,0,0,420,415,1,0,0,
		0,421,108,1,0,0,0,422,424,7,0,0,0,423,422,1,0,0,0,424,425,1,0,0,0,425,
		423,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,429,5,46,0,0,428,430,7,
		0,0,0,429,428,1,0,0,0,430,431,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,
		432,110,1,0,0,0,433,438,5,34,0,0,434,437,3,115,57,0,435,437,8,1,0,0,436,
		434,1,0,0,0,436,435,1,0,0,0,437,440,1,0,0,0,438,436,1,0,0,0,438,439,1,
		0,0,0,439,441,1,0,0,0,440,438,1,0,0,0,441,442,5,34,0,0,442,112,1,0,0,0,
		443,447,5,39,0,0,444,448,8,2,0,0,445,446,5,92,0,0,446,448,9,0,0,0,447,
		444,1,0,0,0,447,445,1,0,0,0,448,449,1,0,0,0,449,450,5,39,0,0,450,114,1,
		0,0,0,451,452,5,92,0,0,452,453,7,3,0,0,453,116,1,0,0,0,454,456,7,4,0,0,
		455,454,1,0,0,0,456,457,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,459,
		1,0,0,0,459,460,6,58,0,0,460,118,1,0,0,0,461,465,7,5,0,0,462,464,7,6,0,
		0,463,462,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,466,1,0,0,0,466,
		120,1,0,0,0,467,465,1,0,0,0,468,469,5,47,0,0,469,470,5,47,0,0,470,474,
		1,0,0,0,471,473,8,7,0,0,472,471,1,0,0,0,473,476,1,0,0,0,474,472,1,0,0,
		0,474,475,1,0,0,0,475,477,1,0,0,0,476,474,1,0,0,0,477,478,6,60,0,0,478,
		122,1,0,0,0,479,480,5,47,0,0,480,481,5,42,0,0,481,485,1,0,0,0,482,484,
		9,0,0,0,483,482,1,0,0,0,484,487,1,0,0,0,485,486,1,0,0,0,485,483,1,0,0,
		0,486,488,1,0,0,0,487,485,1,0,0,0,488,489,5,42,0,0,489,490,5,47,0,0,490,
		491,1,0,0,0,491,492,6,61,0,0,492,124,1,0,0,0,13,0,404,409,420,425,431,
		436,438,447,457,465,474,485,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace analyzer
